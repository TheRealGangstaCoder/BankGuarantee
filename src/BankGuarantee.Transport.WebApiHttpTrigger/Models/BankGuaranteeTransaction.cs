/*
 * Bank Guarantee
 *
 * This Service Domain handles the pricing and issuance of a broad range of bank guarantee instruments
 *
 * OpenAPI spec version: 10.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace BankGuarantee.Transport.WebApiHttpTrigger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class BankGuaranteeTransaction : IEquatable<BankGuaranteeTransaction>
    { 
        /// <summary>
        /// Gets or Sets BankGuaranteeTransactionParameterType
        /// </summary>

        [DataMember(Name="BankGuaranteeTransactionParameterType")]
        public string BankGuaranteeTransactionParameterType { get; set; }

        /// <summary>
        /// Gets or Sets BankGuaranteeTransactionSelectedOption
        /// </summary>

        [DataMember(Name="BankGuaranteeTransactionSelectedOption")]
        public string BankGuaranteeTransactionSelectedOption { get; set; }

        /// <summary>
        /// Gets or Sets BankGuaranteeTransactionStatus
        /// </summary>

        [DataMember(Name="BankGuaranteeTransactionStatus")]
        public string BankGuaranteeTransactionStatus { get; set; }

        /// <summary>
        /// Gets or Sets BankGuaranteeTransactionType
        /// </summary>

        [DataMember(Name="BankGuaranteeTransactionType")]
        public string BankGuaranteeTransactionType { get; set; }

        /// <summary>
        /// Gets or Sets BankGuaranteeTransactionReference
        /// </summary>

        [DataMember(Name="BankGuaranteeTransactionReference")]
        public string BankGuaranteeTransactionReference { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BankGuaranteeTransaction {\n");
            sb.Append("  BankGuaranteeTransactionParameterType: ").Append(BankGuaranteeTransactionParameterType).Append("\n");
            sb.Append("  BankGuaranteeTransactionSelectedOption: ").Append(BankGuaranteeTransactionSelectedOption).Append("\n");
            sb.Append("  BankGuaranteeTransactionStatus: ").Append(BankGuaranteeTransactionStatus).Append("\n");
            sb.Append("  BankGuaranteeTransactionType: ").Append(BankGuaranteeTransactionType).Append("\n");
            sb.Append("  BankGuaranteeTransactionReference: ").Append(BankGuaranteeTransactionReference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BankGuaranteeTransaction)obj);
        }

        /// <summary>
        /// Returns true if BankGuaranteeTransaction instances are equal
        /// </summary>
        /// <param name="other">Instance of BankGuaranteeTransaction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BankGuaranteeTransaction other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    BankGuaranteeTransactionParameterType == other.BankGuaranteeTransactionParameterType ||
                    BankGuaranteeTransactionParameterType != null &&
                    BankGuaranteeTransactionParameterType.Equals(other.BankGuaranteeTransactionParameterType)
                ) && 
                (
                    BankGuaranteeTransactionSelectedOption == other.BankGuaranteeTransactionSelectedOption ||
                    BankGuaranteeTransactionSelectedOption != null &&
                    BankGuaranteeTransactionSelectedOption.Equals(other.BankGuaranteeTransactionSelectedOption)
                ) && 
                (
                    BankGuaranteeTransactionStatus == other.BankGuaranteeTransactionStatus ||
                    BankGuaranteeTransactionStatus != null &&
                    BankGuaranteeTransactionStatus.Equals(other.BankGuaranteeTransactionStatus)
                ) && 
                (
                    BankGuaranteeTransactionType == other.BankGuaranteeTransactionType ||
                    BankGuaranteeTransactionType != null &&
                    BankGuaranteeTransactionType.Equals(other.BankGuaranteeTransactionType)
                ) && 
                (
                    BankGuaranteeTransactionReference == other.BankGuaranteeTransactionReference ||
                    BankGuaranteeTransactionReference != null &&
                    BankGuaranteeTransactionReference.Equals(other.BankGuaranteeTransactionReference)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (BankGuaranteeTransactionParameterType != null)
                    hashCode = hashCode * 59 + BankGuaranteeTransactionParameterType.GetHashCode();
                    if (BankGuaranteeTransactionSelectedOption != null)
                    hashCode = hashCode * 59 + BankGuaranteeTransactionSelectedOption.GetHashCode();
                    if (BankGuaranteeTransactionStatus != null)
                    hashCode = hashCode * 59 + BankGuaranteeTransactionStatus.GetHashCode();
                    if (BankGuaranteeTransactionType != null)
                    hashCode = hashCode * 59 + BankGuaranteeTransactionType.GetHashCode();
                    if (BankGuaranteeTransactionReference != null)
                    hashCode = hashCode * 59 + BankGuaranteeTransactionReference.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BankGuaranteeTransaction left, BankGuaranteeTransaction right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BankGuaranteeTransaction left, BankGuaranteeTransaction right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
