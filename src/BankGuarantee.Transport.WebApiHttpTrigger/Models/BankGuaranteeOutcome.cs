/*
 * Bank Guarantee
 *
 * This Service Domain handles the pricing and issuance of a broad range of bank guarantee instruments
 *
 * OpenAPI spec version: 10.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace BankGuarantee.Transport.WebApiHttpTrigger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class BankGuaranteeOutcome : IEquatable<BankGuaranteeOutcome>
    { 
        /// <summary>
        /// Gets or Sets BankGuaranteeCalendar
        /// </summary>

        [DataMember(Name="BankGuaranteeCalendar")]
        public string BankGuaranteeCalendar { get; set; }

        /// <summary>
        /// Gets or Sets BankGuaranteeCounterparty
        /// </summary>

        [DataMember(Name="BankGuaranteeCounterparty")]
        public Object BankGuaranteeCounterparty { get; set; }

        /// <summary>
        /// Gets or Sets BankGuaranteeDividend
        /// </summary>

        [DataMember(Name="BankGuaranteeDividend")]
        public string BankGuaranteeDividend { get; set; }

        /// <summary>
        /// Gets or Sets BankGuaranteeFees
        /// </summary>

        [DataMember(Name="BankGuaranteeFees")]
        public string BankGuaranteeFees { get; set; }

        /// <summary>
        /// Gets or Sets BankGuaranteeInterest
        /// </summary>

        [DataMember(Name="BankGuaranteeInterest")]
        public string BankGuaranteeInterest { get; set; }

        /// <summary>
        /// Gets or Sets BankGuaranteeMargining
        /// </summary>

        [DataMember(Name="BankGuaranteeMargining")]
        public string BankGuaranteeMargining { get; set; }

        /// <summary>
        /// Gets or Sets BankGuaranteeNotionalPrincipal
        /// </summary>

        [DataMember(Name="BankGuaranteeNotionalPrincipal")]
        public string BankGuaranteeNotionalPrincipal { get; set; }

        /// <summary>
        /// Gets or Sets BankGuaranteeOptions
        /// </summary>

        [DataMember(Name="BankGuaranteeOptions")]
        public string BankGuaranteeOptions { get; set; }

        /// <summary>
        /// Gets or Sets BankGuaranteeRates
        /// </summary>

        [DataMember(Name="BankGuaranteeRates")]
        public Object BankGuaranteeRates { get; set; }

        /// <summary>
        /// Gets or Sets BankGuaranteeSettlement
        /// </summary>

        [DataMember(Name="BankGuaranteeSettlement")]
        public string BankGuaranteeSettlement { get; set; }

        /// <summary>
        /// Gets or Sets BankGuaranteeWorkProduct
        /// </summary>

        [DataMember(Name="BankGuaranteeWorkProduct")]
        public Object BankGuaranteeWorkProduct { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BankGuaranteeOutcome {\n");
            sb.Append("  BankGuaranteeCalendar: ").Append(BankGuaranteeCalendar).Append("\n");
            sb.Append("  BankGuaranteeCounterparty: ").Append(BankGuaranteeCounterparty).Append("\n");
            sb.Append("  BankGuaranteeDividend: ").Append(BankGuaranteeDividend).Append("\n");
            sb.Append("  BankGuaranteeFees: ").Append(BankGuaranteeFees).Append("\n");
            sb.Append("  BankGuaranteeInterest: ").Append(BankGuaranteeInterest).Append("\n");
            sb.Append("  BankGuaranteeMargining: ").Append(BankGuaranteeMargining).Append("\n");
            sb.Append("  BankGuaranteeNotionalPrincipal: ").Append(BankGuaranteeNotionalPrincipal).Append("\n");
            sb.Append("  BankGuaranteeOptions: ").Append(BankGuaranteeOptions).Append("\n");
            sb.Append("  BankGuaranteeRates: ").Append(BankGuaranteeRates).Append("\n");
            sb.Append("  BankGuaranteeSettlement: ").Append(BankGuaranteeSettlement).Append("\n");
            sb.Append("  BankGuaranteeWorkProduct: ").Append(BankGuaranteeWorkProduct).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BankGuaranteeOutcome)obj);
        }

        /// <summary>
        /// Returns true if BankGuaranteeOutcome instances are equal
        /// </summary>
        /// <param name="other">Instance of BankGuaranteeOutcome to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BankGuaranteeOutcome other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    BankGuaranteeCalendar == other.BankGuaranteeCalendar ||
                    BankGuaranteeCalendar != null &&
                    BankGuaranteeCalendar.Equals(other.BankGuaranteeCalendar)
                ) && 
                (
                    BankGuaranteeCounterparty == other.BankGuaranteeCounterparty ||
                    BankGuaranteeCounterparty != null &&
                    BankGuaranteeCounterparty.Equals(other.BankGuaranteeCounterparty)
                ) && 
                (
                    BankGuaranteeDividend == other.BankGuaranteeDividend ||
                    BankGuaranteeDividend != null &&
                    BankGuaranteeDividend.Equals(other.BankGuaranteeDividend)
                ) && 
                (
                    BankGuaranteeFees == other.BankGuaranteeFees ||
                    BankGuaranteeFees != null &&
                    BankGuaranteeFees.Equals(other.BankGuaranteeFees)
                ) && 
                (
                    BankGuaranteeInterest == other.BankGuaranteeInterest ||
                    BankGuaranteeInterest != null &&
                    BankGuaranteeInterest.Equals(other.BankGuaranteeInterest)
                ) && 
                (
                    BankGuaranteeMargining == other.BankGuaranteeMargining ||
                    BankGuaranteeMargining != null &&
                    BankGuaranteeMargining.Equals(other.BankGuaranteeMargining)
                ) && 
                (
                    BankGuaranteeNotionalPrincipal == other.BankGuaranteeNotionalPrincipal ||
                    BankGuaranteeNotionalPrincipal != null &&
                    BankGuaranteeNotionalPrincipal.Equals(other.BankGuaranteeNotionalPrincipal)
                ) && 
                (
                    BankGuaranteeOptions == other.BankGuaranteeOptions ||
                    BankGuaranteeOptions != null &&
                    BankGuaranteeOptions.Equals(other.BankGuaranteeOptions)
                ) && 
                (
                    BankGuaranteeRates == other.BankGuaranteeRates ||
                    BankGuaranteeRates != null &&
                    BankGuaranteeRates.Equals(other.BankGuaranteeRates)
                ) && 
                (
                    BankGuaranteeSettlement == other.BankGuaranteeSettlement ||
                    BankGuaranteeSettlement != null &&
                    BankGuaranteeSettlement.Equals(other.BankGuaranteeSettlement)
                ) && 
                (
                    BankGuaranteeWorkProduct == other.BankGuaranteeWorkProduct ||
                    BankGuaranteeWorkProduct != null &&
                    BankGuaranteeWorkProduct.Equals(other.BankGuaranteeWorkProduct)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (BankGuaranteeCalendar != null)
                    hashCode = hashCode * 59 + BankGuaranteeCalendar.GetHashCode();
                    if (BankGuaranteeCounterparty != null)
                    hashCode = hashCode * 59 + BankGuaranteeCounterparty.GetHashCode();
                    if (BankGuaranteeDividend != null)
                    hashCode = hashCode * 59 + BankGuaranteeDividend.GetHashCode();
                    if (BankGuaranteeFees != null)
                    hashCode = hashCode * 59 + BankGuaranteeFees.GetHashCode();
                    if (BankGuaranteeInterest != null)
                    hashCode = hashCode * 59 + BankGuaranteeInterest.GetHashCode();
                    if (BankGuaranteeMargining != null)
                    hashCode = hashCode * 59 + BankGuaranteeMargining.GetHashCode();
                    if (BankGuaranteeNotionalPrincipal != null)
                    hashCode = hashCode * 59 + BankGuaranteeNotionalPrincipal.GetHashCode();
                    if (BankGuaranteeOptions != null)
                    hashCode = hashCode * 59 + BankGuaranteeOptions.GetHashCode();
                    if (BankGuaranteeRates != null)
                    hashCode = hashCode * 59 + BankGuaranteeRates.GetHashCode();
                    if (BankGuaranteeSettlement != null)
                    hashCode = hashCode * 59 + BankGuaranteeSettlement.GetHashCode();
                    if (BankGuaranteeWorkProduct != null)
                    hashCode = hashCode * 59 + BankGuaranteeWorkProduct.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BankGuaranteeOutcome left, BankGuaranteeOutcome right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BankGuaranteeOutcome left, BankGuaranteeOutcome right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
