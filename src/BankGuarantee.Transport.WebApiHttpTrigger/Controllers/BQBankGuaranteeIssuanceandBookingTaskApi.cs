/*
 * Bank Guarantee
 *
 * This Service Domain handles the pricing and issuance of a broad range of bank guarantee instruments
 *
 * OpenAPI spec version: 10.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System.ComponentModel.DataAnnotations;
using BankGuarantee.Core.Actions;
using BankGuarantee.Transport.WebApiHttpTrigger.Attributes;
using BankGuarantee.Transport.WebApiHttpTrigger.Models;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.AspNetCore.Annotations;

namespace BankGuarantee.Transport.WebApiHttpTrigger.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class BQBankGuaranteeIssuanceandBookingTaskApiController : ControllerBase
    {
        private readonly IBQBankGuaranteeIssuanceAndBookingTask _bankGuaranteeIssuanceAndBookingTask;
        public BQBankGuaranteeIssuanceandBookingTaskApiController(IBQBankGuaranteeIssuanceAndBookingTask bankGuaranteeIssuanceAndBookingTask)
        {
            _bankGuaranteeIssuanceAndBookingTask = bankGuaranteeIssuanceAndBookingTask;
        }
        /// <summary>
        /// Exchange Bank Guarantee Issuance and Booking Task
        /// </summary>
        /// <remarks>Exchange Bank Guarantee Issuance and Booking Task</remarks>
        /// <param name="body"></param>
        /// <param name="bankguaranteeId"></param>
        /// <param name="bankguaranteeissuanceandbookingtaskId"></param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="429">Too Many Requests</response>
        /// <response code="500">Internal Server Error</response>
        [HttpPut]
        [Route("/BIAN-3/BankGuarantee/10.0.0/BankGuarantee/{bankguaranteeId}/BankGuaranteeIssuanceandBookingTask/{bankguaranteeissuanceandbookingtaskId}/Exchange")]
        [ValidateModelState]
        [SwaggerOperation("ExchangeBankGuaranteeIssuanceandBookingTask")]
        [SwaggerResponse(statusCode: 200, type: typeof(BankGuaranteeIssuanceandBookingTask), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(HTTPError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(HTTPError), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 403, type: typeof(HTTPError), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(HTTPError), description: "Not Found")]
        [SwaggerResponse(statusCode: 429, type: typeof(HTTPError), description: "Too Many Requests")]
        [SwaggerResponse(statusCode: 500, type: typeof(HTTPError), description: "Internal Server Error")]
        public virtual IActionResult ExchangeBankGuaranteeIssuanceandBookingTask([FromBody] BankGuaranteeIssuanceandBookingTask body, [FromRoute][Required] string bankguaranteeId, [FromRoute][Required] string bankguaranteeissuanceandbookingtaskId)
        {
            //TODO: implement status codes responses
            var taskResult = _bankGuaranteeIssuanceAndBookingTask.ExchangeBankGuaranteeIssuanceAndBookingTask(bankguaranteeId, bankguaranteeissuanceandbookingtaskId);

            var response = taskResult != null
                ? JsonConvert.DeserializeObject<BankGuaranteeIssuanceandBookingTask>(taskResult)
                : default(BankGuaranteeIssuanceandBookingTask);            //TODO: Change the data returned
            return new ObjectResult(response);
        }

        /// <summary>
        /// Execute Bank Guarantee Issuance and Booking Task
        /// </summary>
        /// <remarks>Execute Bank Guarantee Issuance and Booking Task</remarks>
        /// <param name="body"></param>
        /// <param name="bankguaranteeId"></param>
        /// <param name="bankguaranteeissuanceandbookingtaskId"></param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="429">Too Many Requests</response>
        /// <response code="500">Internal Server Error</response>
        [HttpPut]
        [Route("/BIAN-3/BankGuarantee/10.0.0/BankGuarantee/{bankguaranteeId}/BankGuaranteeIssuanceandBookingTask/{bankguaranteeissuanceandbookingtaskId}/Execute")]
        [ValidateModelState]
        [SwaggerOperation("ExecuteBankGuaranteeIssuanceandBookingTask")]
        [SwaggerResponse(statusCode: 200, type: typeof(BankGuaranteeIssuanceandBookingTask), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(HTTPError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(HTTPError), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 403, type: typeof(HTTPError), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(HTTPError), description: "Not Found")]
        [SwaggerResponse(statusCode: 429, type: typeof(HTTPError), description: "Too Many Requests")]
        [SwaggerResponse(statusCode: 500, type: typeof(HTTPError), description: "Internal Server Error")]
        public virtual IActionResult ExecuteBankGuaranteeIssuanceandBookingTask([FromBody] BankGuaranteeIssuanceandBookingTask body, [FromRoute][Required] string bankguaranteeId, [FromRoute][Required] string bankguaranteeissuanceandbookingtaskId)
        {
            //TODO: implement status codes responses
            var taskResult = _bankGuaranteeIssuanceAndBookingTask.ExecuteBankGuaranteeIssuanceAndBookingTask(bankguaranteeId, bankguaranteeissuanceandbookingtaskId);

            var response = taskResult != null
                ? JsonConvert.DeserializeObject<BankGuaranteeIssuanceandBookingTask>(taskResult)
                : default(BankGuaranteeIssuanceandBookingTask);            //TODO: Change the data returned
            return new ObjectResult(response);
        }

        /// <summary>
        /// Initiate Bank Guarantee Issuance and Booking Task
        /// </summary>
        /// <remarks>Initiate Bank Guarantee Issuance and Booking Task</remarks>
        /// <param name="body"></param>
        /// <param name="bankguaranteeId"></param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="429">Too Many Requests</response>
        /// <response code="500">Internal Server Error</response>
        [HttpPost]
        [Route("/BIAN-3/BankGuarantee/10.0.0/BankGuarantee/{bankguaranteeId}/BankGuaranteeIssuanceandBookingTask/Initiate")]
        [ValidateModelState]
        [SwaggerOperation("InitiateBankGuaranteeIssuanceandBookingTask")]
        [SwaggerResponse(statusCode: 200, type: typeof(BankGuaranteeIssuanceandBookingTask), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(HTTPError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(HTTPError), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 403, type: typeof(HTTPError), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(HTTPError), description: "Not Found")]
        [SwaggerResponse(statusCode: 429, type: typeof(HTTPError), description: "Too Many Requests")]
        [SwaggerResponse(statusCode: 500, type: typeof(HTTPError), description: "Internal Server Error")]
        public virtual IActionResult InitiateBankGuaranteeIssuanceandBookingTask([FromBody] BankGuaranteeIssuanceandBookingTask body, [FromRoute][Required] string bankguaranteeId)
        {
            //TODO: implement status codes responses
            var taskResult = _bankGuaranteeIssuanceAndBookingTask.InitiateBankGuaranteeIssuanceAndBookingTask(bankguaranteeId);

            var response = taskResult != null
                ? JsonConvert.DeserializeObject<BankGuaranteeIssuanceandBookingTask>(taskResult)
                : default(BankGuaranteeIssuanceandBookingTask);            //TODO: Change the data returned
            return new ObjectResult(response);
        }

        /// <summary>
        /// Notify Bank Guarantee Issuance and Booking Task
        /// </summary>
        /// <remarks>Notify Bank Guarantee Issuance and Booking Task</remarks>
        /// <param name="bankguaranteeId"></param>
        /// <param name="bankguaranteeissuanceandbookingtaskId"></param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="429">Too Many Requests</response>
        /// <response code="500">Internal Server Error</response>
        [HttpGet]
        [Route("/BIAN-3/BankGuarantee/10.0.0/BankGuarantee/{bankguaranteeId}/BankGuaranteeIssuanceandBookingTask/{bankguaranteeissuanceandbookingtaskId}/Notify")]
        [ValidateModelState]
        [SwaggerOperation("NotifyBankGuaranteeIssuanceandBookingTask")]
        [SwaggerResponse(statusCode: 200, type: typeof(BankGuaranteeIssuanceandBookingTask), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(HTTPError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(HTTPError), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 403, type: typeof(HTTPError), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(HTTPError), description: "Not Found")]
        [SwaggerResponse(statusCode: 429, type: typeof(HTTPError), description: "Too Many Requests")]
        [SwaggerResponse(statusCode: 500, type: typeof(HTTPError), description: "Internal Server Error")]
        public virtual IActionResult NotifyBankGuaranteeIssuanceandBookingTask([FromRoute][Required] string bankguaranteeId, [FromRoute][Required] string bankguaranteeissuanceandbookingtaskId)
        {
            //TODO: implement status codes responses
            var taskResult = _bankGuaranteeIssuanceAndBookingTask.NotifyBankGuaranteeIssuanceAndBookingTask(bankguaranteeId, bankguaranteeissuanceandbookingtaskId);

            var response = taskResult != null
                ? JsonConvert.DeserializeObject<BankGuaranteeIssuanceandBookingTask>(taskResult)
                : default(BankGuaranteeIssuanceandBookingTask);            //TODO: Change the data returned
            return new ObjectResult(response);
        }

        /// <summary>
        /// Request Bank Guarantee Issuance and Booking Task
        /// </summary>
        /// <remarks>Request Bank Guarantee Issuance and Booking Task</remarks>
        /// <param name="body"></param>
        /// <param name="bankguaranteeId"></param>
        /// <param name="bankguaranteeissuanceandbookingtaskId"></param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="429">Too Many Requests</response>
        /// <response code="500">Internal Server Error</response>
        [HttpPut]
        [Route("/BIAN-3/BankGuarantee/10.0.0/BankGuarantee/{bankguaranteeId}/BankGuaranteeIssuanceandBookingTask/{bankguaranteeissuanceandbookingtaskId}/Request")]
        [ValidateModelState]
        [SwaggerOperation("RequestBankGuaranteeIssuanceandBookingTask")]
        [SwaggerResponse(statusCode: 200, type: typeof(BankGuaranteeIssuanceandBookingTask), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(HTTPError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(HTTPError), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 403, type: typeof(HTTPError), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(HTTPError), description: "Not Found")]
        [SwaggerResponse(statusCode: 429, type: typeof(HTTPError), description: "Too Many Requests")]
        [SwaggerResponse(statusCode: 500, type: typeof(HTTPError), description: "Internal Server Error")]
        public virtual IActionResult RequestBankGuaranteeIssuanceandBookingTask([FromBody] BankGuaranteeIssuanceandBookingTask body, [FromRoute][Required] string bankguaranteeId, [FromRoute][Required] string bankguaranteeissuanceandbookingtaskId)
        {
            //TODO: implement status codes responses
            var taskResult = _bankGuaranteeIssuanceAndBookingTask.RequestBankGuaranteeIssuanceAndBookingTask(bankguaranteeId, bankguaranteeissuanceandbookingtaskId);

            var response = taskResult != null
                ? JsonConvert.DeserializeObject<BankGuaranteeIssuanceandBookingTask>(taskResult)
                : default(BankGuaranteeIssuanceandBookingTask);            //TODO: Change the data returned
            return new ObjectResult(response);
        }

        /// <summary>
        /// Retrieve Bank Guarantee Issuance and Booking Task
        /// </summary>
        /// <remarks>Retrieve Bank Guarantee Issuance and Booking Task</remarks>
        /// <param name="bankguaranteeId"></param>
        /// <param name="bankguaranteeissuanceandbookingtaskId"></param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="429">Too Many Requests</response>
        /// <response code="500">Internal Server Error</response>
        [HttpGet]
        [Route("/BIAN-3/BankGuarantee/10.0.0/BankGuarantee/{bankguaranteeId}/BankGuaranteeIssuanceandBookingTask/{bankguaranteeissuanceandbookingtaskId}/Retrieve")]
        [ValidateModelState]
        [SwaggerOperation("RetrieveBankGuaranteeIssuanceandBookingTask")]
        [SwaggerResponse(statusCode: 200, type: typeof(BankGuaranteeIssuanceandBookingTask), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(HTTPError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(HTTPError), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 403, type: typeof(HTTPError), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(HTTPError), description: "Not Found")]
        [SwaggerResponse(statusCode: 429, type: typeof(HTTPError), description: "Too Many Requests")]
        [SwaggerResponse(statusCode: 500, type: typeof(HTTPError), description: "Internal Server Error")]
        public virtual IActionResult RetrieveBankGuaranteeIssuanceandBookingTask([FromRoute][Required] string bankguaranteeId, [FromRoute][Required] string bankguaranteeissuanceandbookingtaskId)
        {
            //TODO: implement status codes responses
            var taskResult = _bankGuaranteeIssuanceAndBookingTask.RetrieveBankGuaranteeIssuanceAndBookingTask(bankguaranteeId, bankguaranteeissuanceandbookingtaskId);

            var response = taskResult != null
                ? JsonConvert.DeserializeObject<BankGuaranteeIssuanceandBookingTask>(taskResult)
                : default(BankGuaranteeIssuanceandBookingTask);            //TODO: Change the data returned
            return new ObjectResult(response);
        }

        /// <summary>
        /// Update Bank Guarantee Issuance and Booking Task
        /// </summary>
        /// <remarks>Update Bank Guarantee Issuance and Booking Task</remarks>
        /// <param name="body"></param>
        /// <param name="bankguaranteeId"></param>
        /// <param name="bankguaranteeissuanceandbookingtaskId"></param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="429">Too Many Requests</response>
        /// <response code="500">Internal Server Error</response>
        [HttpPut]
        [Route("/BIAN-3/BankGuarantee/10.0.0/BankGuarantee/{bankguaranteeId}/BankGuaranteeIssuanceandBookingTask/{bankguaranteeissuanceandbookingtaskId}/Update")]
        [ValidateModelState]
        [SwaggerOperation("UpdateBankGuaranteeIssuanceandBookingTask")]
        [SwaggerResponse(statusCode: 200, type: typeof(BankGuaranteeIssuanceandBookingTask), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(HTTPError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(HTTPError), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 403, type: typeof(HTTPError), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(HTTPError), description: "Not Found")]
        [SwaggerResponse(statusCode: 429, type: typeof(HTTPError), description: "Too Many Requests")]
        [SwaggerResponse(statusCode: 500, type: typeof(HTTPError), description: "Internal Server Error")]
        public virtual IActionResult UpdateBankGuaranteeIssuanceandBookingTask([FromBody] BankGuaranteeIssuanceandBookingTask body, [FromRoute][Required] string bankguaranteeId, [FromRoute][Required] string bankguaranteeissuanceandbookingtaskId)
        {
            //TODO: implement status codes responses
            var taskResult = _bankGuaranteeIssuanceAndBookingTask.UpdateBankGuaranteeIssuanceAndBookingTask(bankguaranteeId, bankguaranteeissuanceandbookingtaskId);

            var response = taskResult != null
                ? JsonConvert.DeserializeObject<BankGuaranteeIssuanceandBookingTask>(taskResult)
                : default(BankGuaranteeIssuanceandBookingTask);            //TODO: Change the data returned
            return new ObjectResult(response);
        }
    }
}
